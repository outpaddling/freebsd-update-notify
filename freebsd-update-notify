#!/bin/sh -e

# Protect against trojans
PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

# pgrep doesn't find freebsd-update-notify processes.
# Read the man page thoroughly and tried all relevant flags
# This oddly causes two freebsd-update-notify processes to be spawned
# running=$(ps ax | fgrep -v fgrep | fgrep freebsd-update-notify | wc -l)
# Use a temp file instead
tmpfile=$(mktemp)
ps ax | fgrep -v fgrep | fgrep freebsd-update-notify > $tmpfile
running=$(cat $tmpfile | wc -l) # Use a pipe to hide filename from wc
rm -f $tmpfile
if [ $running -gt 1 ]; then
    printf 'freebsd-update-notify is already running.\n'
    exit 0
fi

# Notifications are only generally useful on the console
DISPLAY=:0
export DISPLAY

timestamp_file=/root/.last-freebsd-update
if [ ! -e $timestamp_file ]; then
    touch $timestamp_file
fi

current_time=$(date '+%s')
last_update_time=$(date -r $timestamp_file '+%s')
seconds_since_update=$(( $current_time - $last_update_time ))
days_since_update=$(( $seconds_since_update / 60 / 24 ))

# FIXME: Make this configurable
max_days_between_updates=7
hours_delay=6

printf "Last update time          = "
date -j -f '%s' $last_update_time
printf "Seconds since last update = $seconds_since_update\n"
printf "Days since last update    = $days_since_update\n"

# Find out who owns DISPLAY
display_users=$(ps -aexwwj | grep "DISPLAY=$DISPLAY_ID" | awk '{ print $1 }' | sort -u)

if freebsd-update updatesready || [ $days_since_update -gt $max_days_between_updates ]; then
    for user in $display_users; do
	# Zenity --question returns 0 if the user clicks Yes, but
	# the exit code of su is not the exit code of zenity.
	# Create a file if zenity returns 0 so we can determine the
	# yes/no response after.
	# su returns 0 if it can access the DISPLAY.

	printf "Trying $user...\n"
	# Test access to the DISPLAY
	if su -l $user -c "env DISPLAY=:0 xwininfo -root >> /dev/null"; then
	    
	    # If we can access the display, start dialog
	    if su -l $user -c "/usr/local/bin/zenity --display=:0 --question --text='Updates are available.\nInstall and reboot now?' >> /dev/null"; then
		    su -l $user -c '/usr/local/bin/urxvt -e auto-update-system --defaults >> /dev/null'
		    touch $timestamp_file
		    su -l $user -c '/usr/local/bin/zenity --display=:0 --info --text="Updates complete.\nThe system will now reboot." >> /dev/null'
	    else
		# Delay next notification to $hours_delay hours from now
		# Convert time to a format usable by the touch command
		now=$(date '+%s') # Seconds
		new_time_stamp=$(($now - $max_days_between_updates * 3600 * 24 + $hours_delay * 3600))
		touch_time=$(date -j -f '%s' $new_time_stamp +'%Y%m%d%H%M.%S')
		printf "Delayed update time       = $touch_time\n"
		touch -t $touch_time $timestamp_file
		su -l $user -c '/usr/local/bin/zenity --display=:0 --info --text="You will be reminded again in $hours_delay hours.\nYou can update manually any time by running\n\n\tauto-admin" >> /dev/null'
	    fi
	    break   # Don't repeat for other users in $display_users
	else
	    printf "Failed.\n"
	fi
    done
else
    # Try to fetch updates.  Next round of cron will notify user.
    printf "Running freebsd-update cron...\n"
    freebsd-update cron
fi
